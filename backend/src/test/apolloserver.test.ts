import { ApolloServer, BaseContext } from "@apollo/server";
import axios from "axios";
import { MongoMemoryServer } from "mongodb-memory-server";
import mongoose from "mongoose";
import {
    afterAll,
    afterEach,
    beforeAll,
    beforeEach,
    describe,
    expect,
    it,
} from "vitest";
import { createApolloServer } from "../server";
import MovieModel from "../models/movie.model";
import ReviewModel from "../models/review.model";
import { SortingType } from "../utils/sortUtils";
import { movies, reviews } from "./mock/util";
import {
    ADD_REVIEW,
    DELETE_REVIEW,
    GET_FILTERS,
    GET_LATEST_REVIEWS,
    GET_MOVIE,
    GET_MOVIES,
    GET_USER_REVIEWS,
} from "./queries";

const allVariables = {
    movie: {
        movieId: 157336,
    },
    movies: {
        skip: 0,
        limit: 3,
        filters: {
            Decade: [],
            Rating: [],
            Genre: [],
            Status: [],
            Runtime: [],
        },
        sortOption: SortingType.MOST_POPULAR,
        search: "",
    },
    filters: {
        appliedFilters: {
            Decade: [],
            Rating: [],
            Genre: ["Thriller"],
            Status: [],
            Runtime: [],
        },
        search: "the",
    },
    latestReviews: {
        limit: 2,
    },
    userReviews: {
        username: "testuser2",
    },
    addReview: {
        movieId: 565770,
        username: "testuser3",
        rating: 4,
        comment: "Cool movie",
    },
    deleteReview: {
        id: "673625f49c33bb841a3fef05",
    },
};

describe("resolvers", () => {
    let server: ApolloServer<BaseContext>;
    let url: string;
    let mongoServer: MongoMemoryServer;

    beforeAll(async () => {
        mongoServer = await MongoMemoryServer.create();
        const mongoUri = mongoServer.getUri();

        // createApolloServer handles connecting to the database
        ({ server, url } = await createApolloServer({ port: 0 }, mongoUri));

        await MovieModel.createCollection();
        await ReviewModel.createCollection();
    });

    beforeEach(async () => {
        await MovieModel.insertMany(movies);
        await ReviewModel.insertMany(reviews);
    });

    afterEach(async () => {
        await MovieModel.deleteMany({});
        await ReviewModel.deleteMany({});
    });

    afterAll(async () => {
        if (mongoServer) {
            await mongoServer.stop();
        }
        if (server) {
            await server.stop();
        }

        await mongoose.connection.close();
    });

    for (const [query, name, variables] of [
        [GET_MOVIE, "movie", allVariables.movie],
        [GET_MOVIES, "movies", allVariables.movies],
        [GET_FILTERS, "filters", allVariables.filters],
        [GET_LATEST_REVIEWS, "latestReviews", allVariables.latestReviews],
        [GET_USER_REVIEWS, "userReviews", allVariables.userReviews],
        [DELETE_REVIEW, "deleteReview", allVariables.deleteReview],
    ]) {
        it(`correctly handles ${name} resolver`, async () => {
            const response = await axios.post(url, { query, variables });
            expect(response.data.errors).toBeUndefined();
            expect(response.data.data).toMatchSnapshot();
        });
    }

    it("correctly handles addReview resolver", async () => {
        // Can't use toMatchSnapshot because the id is generated by the database
        const response = await axios.post(url, {
            query: ADD_REVIEW,
            variables: allVariables.addReview,
        });
        expect(response.data.errors).toBeUndefined();
        expect(response.data.data.addReview).toMatchObject({
            username: "testuser3",
            rating: 4,
            comment: "Cool movie",
        });
    });
});
